name: 'Build and upload conda packages'
description: 'Automatic conda package compilation and publication in the speficied Anaconda user or organization.'
author: "Diego Prada-Gracia"
branding:
  icon: "package"
  color: "orange"
inputs:
  meta_yaml_dir:
    description: Path to the directory in the repository where the meta.yaml file is located.
    required: true
  python-version:
    description: Python version of the package to be built.
    required: false
    default: ''
  variants:
    description: Conda build variants
    required: false
    default: ''
  variant_conf:
    description: Conda build variants config file
    required: false
    default: ''
  mambabuild:
    description: Using boa (mambabuild) to build the packages.
    required: false
    default: false
  platform_host:
    description: Target host plaform.
    required: false
    default: true
  platform_all:
    description: Target all supported platforms.
    required: false
    default: false
  platform_linux-64:
    description: Target platform linux-64.
    required: false
    default: false
  platform_linux-32:
    description: Target platform linux-32.
    required: false
    default: false
  platform_osx-64:
    description: Target platform osx-64.
    required: false
    default: false
  platform_osx-arm64:
    description: Target platform osx-arm64.
    required: false
    default: false
  platform_linux-ppc64:
    description: Target platform linux-ppc64.
    required: false
    default: false
  platform_linux-ppc64le:
    description: Target platform linux-ppc64le.
    required: false
    default: false
  platform_linux-s390x:
    description: Target platform linux-s390x.
    required: false
    default: false
  platform_linux-armv6l:
    description: Target platform linux-armv6l.
    required: false
    default: false
  platform_linux-armv7l:
    description: Target platform linux-armv7l.
    required: false
    default: false
  platform_linux-aarch64:
    description: Target platform linux-aarch64.
    required: false
    default: false
  platform_win-32:
    description: Target platform win-32.
    required: false
    default: false
  platform_win-64:
    description: Target platform win-32.
    required: false
    default: false
  overwrite:
    description: Do not cancel the uploading if a package with the same name is found already in Anaconda.
    required: false
    default: false
  user:
    description: Name of the Anaconda user or organization where the conda package will be published.
    required: true
  label:
    description: Label of conda package published.
    required: false
    default: auto
  token:
    description: Token to access to anaconda cloud.
    required: false
    default: ''
  debug:
    description: Enable conda build debug output.
    required: false
    default: false
 
runs:
  using: "composite"
  steps:
    - name: Getting release data
      id: getting-release-data
      shell: bash
      run: |
        echo "::group::Information of the trigger event"
        echo "Trigger event and type: $GITHUB_EVENT_NAME, ${{github.event.action}}"
        echo "Associated commit SHA and tag: $GITHUB_SHA, $GITHUB_REF"
        echo "::endgroup::"
    - name: Packages compilation
      id: packages-compilation
      shell: bash -l {0}
      working-directory: .
      run: |
        echo "::group::Building conda package for host platform"
        out_dir=`mktemp -d -t compilation-XXXXXXXXXX`
        cmd="--no-anaconda-upload --output-folder $out_dir"
        if ${{ inputs.debug }}; then
            cmd="$cmd --debug"
        fi
        if test "${{ inputs.python-version }}"; then
          cmd="$cmd --python ${{ inputs.python-version }}"
        fi
        if "${{ inputs.mambabuild }}"; then
          cmd="conda mambabuild $cmd"
        else
          cmd="conda build $cmd"
        fi
        if test ${{ inputs.variant_conf }}; then
          cmd="$cmd -m ${{ inputs.variant_conf }}"
        fi
        cmd="$cmd ${{ inputs.meta_yaml_dir }}"
        if test "${{ inputs.variants }}"; then
          echo $cmd --variants "${{ inputs.variants }}"
          $cmd --variants "${{ inputs.variants }}"
        else
          echo $cmd
          $cmd
        fi
        for dirname in $out_dir/*; do
          if [ -d "$dirname" ]; then
            for filename in $dirname/*; do
              if [ "${filename: -8}" == ".tar.bz2" ]; then
                HOST_PACKAGE=$filename
              fi
            done
          fi
        done
        echo "Package for host platform compiled as $HOST_PACKAGE"
        du -sh $HOST_PACKAGE
        echo "::endgroup::"
        echo "::group::Building conda package for other platforms"
        if "${{ inputs.platform_all }}"; then
          echo "conda convert -p all $HOST_PACKAGE -o $out_dir"
          conda convert -p all $HOST_PACKAGE -o $out_dir
          echo "Package for all platforms compiled"
        fi
        if "${{ inputs.platform_linux-64 }}"; then
          echo "conda convert -p linux-64 $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-64 $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-64 compiled"
        fi
        if "${{ inputs.platform_osx-64 }}"; then
          echo "conda convert -p osx-64 $HOST_PACKAGE -o $out_dir"
          conda convert -p osx-64 $HOST_PACKAGE -o $out_dir
          echo "Package for platform osx-64 compiled"
        fi
        if "${{ inputs.platform_osx-arm64 }}"; then
          echo "conda convert -p osx-arm64 $HOST_PACKAGE -o $out_dir"
          conda convert -p osx-arm64 $HOST_PACKAGE -o $out_dir
          echo "Package for platform osx-arm64 compiled"
        fi
        if "${{ inputs.platform_linux-32 }}"; then
          echo "conda convert -p linux-32 $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-32 $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-32 compiled"
        fi
        if "${{ inputs.platform_linux-ppc64 }}"; then
          echo "conda convert -p linux-ppc64 $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-ppc64 $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-ppc64 compiled"
        fi
        if "${{ inputs.platform_linux-ppc64le }}"; then
          echo "conda convert -p linux-ppc64le $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-ppc64le $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-ppc64le compiled"
        fi
        if "${{ inputs.platform_linux-s390x }}"; then
          echo "conda convert -p linux-s390x $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-s390x $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-s390x compiled"
        fi
        if "${{ inputs.platform_linux-armv6l }}"; then
          echo "conda convert -p linux-armv6l $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-armv6l $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-armv6l compiled"
        fi
        if "${{ inputs.platform_linux-armv7l }}"; then
          echo "conda convert -p linux-armv7l $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-armv7l $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-armv7l compiled"
        fi
        if "${{ inputs.platform_linux-aarch64 }}"; then
          echo "conda convert -p linux-aarch64 $HOST_PACKAGE -o $out_dir"
          conda convert -p linux-aarch64 $HOST_PACKAGE -o $out_dir
          echo "Package for platform linux-aarch64 compiled"
        fi
        if "${{ inputs.platform_win-32 }}"; then
          echo "conda convert -p win-32 $HOST_PACKAGE -o $out_dir"
          conda convert -p win-32 $HOST_PACKAGE -o $out_dir
          echo "Package for platform win-32 compiled"
        fi
        if "${{ inputs.platform_win-64 }}"; then
          echo "conda convert -p win-64 $HOST_PACKAGE -o $out_dir"
          conda convert -p win-64 $HOST_PACKAGE -o $out_dir
          echo "Package for platform win-64 compiled"
        fi
        if ! "${{ inputs.platform_host }}"; then
          rm $HOST_PACKAGE
          echo "Package for host platform removed"
        fi
        echo "::set-output name=out_dir::'$out_dir'"
        echo "::endgroup::"
    - name: Packages uploading
      id: packages-uploading
      shell: bash -l {0}
      working-directory: .
      run: |
        echo "::group::Conda packages uploading"
        #cd ${{ steps.packages-compilation.outputs.out_dir }}
        label=${{ inputs.label }}
        force=""
        if "${{ inputs.overwrite }}"; then
          force="--force"
        else
          force="--skip"
        fi
        if [ "$label" == "auto" ]; then
          if [ "${{github.event.action}}" == "released" ]; then
             label=main
          elif [ "${{github.event.action}}" == "prereleased" ]; then
             label=dev
          elif ${{ endsWith(github.ref, 'tip') }}; then
             label=tip
          elif ${{ endsWith(github.ref, 'edge') }}; then
             label=edge
          else
             label=test
          fi
        fi
        export ANACONDA_API_TOKEN=${{ inputs.token }}
        SHORT_SHA="$(git rev-parse --short $GITHUB_SHA)"
        for dirname in ${{ steps.packages-compilation.outputs.out_dir }}/*; do
          if [ -d "$dirname" ]; then
            for filename in $dirname/*; do
              if [ "${filename: -8}" == ".tar.bz2" ]; then
                echo "anaconda upload --user ${{ inputs.user }} $force --label $label $filename"
                anaconda upload --user ${{ inputs.user }} $force --label $label $filename
              fi
            done
          fi
        done 
        echo "::endgroup::"

